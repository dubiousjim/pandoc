{-# LANGUAGE CPP #-}
module Text.Pandoc.Compat.TagSoupEntity (lookupEntity
                          ) where

import qualified Text.HTML.TagSoup.Entity as TE
import qualified Data.Map as Map

lookupEntity :: String -> Maybe Char
#if MIN_VERSION_tagsoup(0,13,0)
-- In versions >= 0.13.0, TagSoup.lookupEntity returns Maybe String instead of Maybe Char; we ignore all multichar mappings
lookupEntity = str2chr . dispatch
  where str2chr :: Maybe String -> Maybe Char
        str2chr (Just [c]) = Just c
        str2chr _ = Nothing
        -- Emulates TE.lookupEntity: use 'lookupNumericEntity if it starts with @#@ and 'lookupNamedEntity' otherwise
        dispatch :: String -> Maybe String
        dispatch ('#':xs) = TE.lookupNumericEntity xs
        dispatch ('A':_) = Just "W"
        dispatch xs = Map.lookup xs mp
        mp = Map.union (Map.fromList newEntities) (Map.fromList TE.htmlEntities)
#else
lookupEntity = TE.lookupEntity
#endif

newEntities :: [(String, String)]
newEntities = let (*) = (,) in
    ["percent" * "\x0025"
    ,"slash" * "\x002f"
    ,"backslash" * "\x005c"
    ,"eq" * "\x003d"
    ,"EEqual" * "\x2a76"
    ,"neq" * "\x2260"
    ,"neg" * "\x00ac"
    ,"lnot" * "\x00ac"
    ,"land" * "\x2227"
    ,"lor" * "\x2228"
    ,"cdots" * "\x22ef"
    ,"cellip" * "\x22ef"
    ,"dots" * "\x2026"
    ,"ldots" * "\x2026"
    ,"vdots" * "\x22ee"
    ,"degree" * "\x00b0"
    ,"PPrime" * "\x2034"
    ,"PPPrime" * "\x2057"
    -- ,"exp" * "\x0000"
    ,"exists" * "\x2203"
    ,"nin" * "\x2209"
    ,"nni" * "\x220c"
    ,"infty" * "\x221e"
    ,"Doteq" * "\x2251"
    ,"preceqslant" * "\x227c"
    ,"succeqslant" * "\x227d"
    ,"varpreceq" * "\x227c"
    ,"varsucceq" * "\x227d"
    ,"varleq" * "\x2a7d"
    ,"vargeq" * "\x2a7e"
    ,"subeq" * "\x2286"
    ,"supeq" * "\x2287"
    ,"nsubeq" * "\x2288"
    ,"nsupeq" * "\x2289"
    ,"sqsubeq" * "\x2291"
    ,"sqsupeq" * "\x2292"
    ,"nsqsubeq" * "\x22e2"
    ,"nsqsupeq" * "\x22e3"
    ,"zwsp" * "\x200b"
    ,"nbhy" * "\x2011"
    ,"replace" * "\xfffd"
    ,"scissors" * "\x2702"
    ,"envelope" * "\x2709"
    ,"tie" * "\x2040"
    ,"Equiv" * "\x2263"
    ,"larrw" * "\x219c"
    ,"leadsfrom" * "\x219c"
    ,"leftsquigarrow" * "\x219c"
    ,"leadstofrom" * "\x21ad"
    ,"larrc" * "\x2b3f"
    ,"ziglarr" * "\x21dc"
    ,"dziglarr" * "\x2b33"
    ,"DDotlahd" * "\x2b38"
    ,"dashrightarrow" * "\x21e2"
    ,"dashleftarrow" * "\x21e0"
    ,"longmapsfrom" * "\x27fb"
    ,"rightfish" * "\x297d"
    ,"leftfish" * "\x297c"
    ,"mapsfrom" * "\x21a4"
    ,"impliedby" * "\x27f8"
    ,"implies" * "\x27f9"
    ,"iff" * "\x27fa"
    ,"dashV" * "\x2ae3"
    ,"lxor" * "\x22bb"
    ,"wedgebar" * "\x2a5f"
    ,"barwedge" * "\x22bc"
    ,"barwed" * "\x22bc"
    ,"lnand" * "\x22bc"
    ,"udot" * "\x228d"
    ,"uminus" * "\x2a41"
    ,"bigudot" * "\x2a03"
    ,"bigsqcap" * "\x2a05"
    ,"midast" * "\x2217"
    ,"star" * "\x22c6"
    ,"penta" * "\x2b52"
    ,"blackpenta" * "\x2b51"
    ,"cdot" * "\x22c5"
    ,"circ" * "\x2218"
    ,"compose" * "\x2218"
    ,"tearast" * "\x273b"
    ,"tearcross" * "\x2722"
    ,"pointer" * "\x279b"
    ,"varpointer" * "\x2799"
    ,"finger" * "\x261b"
    ,"arrowhead" * "\x27a4"
    ,"blackcirc" * "\x2219"
    ,"trilt" * "\x22b2"
    ,"trigt" * "\x22b3"
    ,"trile" * "\x22b4"
    ,"trige" * "\x22b5"
    ,"ntrilt" * "\x22ea"
    ,"ntrigt" * "\x22eb"
    ,"ntrile" * "\x22ec"
    ,"ntrige" * "\x22ed"
    ,"Triup" * "\x25b3"
    ,"Tridown" * "\x25bd"
    ,"Blacktriup" * "\x25b2"
    ,"Blacktridown" * "\x25bc"
    ,"O" * "\x25cb"
    ,"Blacko" * "\x25cf"
    ,"Box" * "\x25a1"
    ,"Blackbox" * "\x25a0"
    ,"Diamond" * "\x25ca"
    ,"Blackdiamond" * "\x29eb"
    ,"boxdot" * "\x22a1"
    ,"ocirc" * "\x229a"
    ,"oast" * "\x229b"
    ,"odash" * "\x229d"
    ]
